#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# <https://github.com/P3TERX/Actions-OpenWrt>
#
# Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2020 9l
# <https://github.com/9l/openwrt-build-action>
#

name: OpenWrt-x86_64-lede

on: 
  #schedule:
  #  - cron: 0 3 * * 1
  push:
    tags: R20.*.*-test

env:
  BUILD_NAME: OpenWrt-x86_64-lede
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: x86_64-lede.config
  SHOWSSR_SH: HELLOWORLD.sh
  CUSTOMIZE_SH: customize.sh

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo swapoff /mnt/swapfile
          sudo rm -rf /mnt/swapfile /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d/* /usr/local/lib/android /opt/ghc
          sudo -E apt-get -y purge azure-cli dotnet* firefox ghc* google* hhvm llvm* mysql* openjdk* php* powershell texlive* zulu*
          sudo -E apt-get update
          sudo -E apt-get -y dist-upgrade
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libuv1-dev patch python2.7 python3.6 unzip zlib1g-dev lib32gcc1 libc6-dev libc6-dev-i386 subversion flex node-uglify gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx-ucl libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib linux-libc-dev
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

      - name: Clone source code
        run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

      - name: Update & Install feeds
        working-directory: ./openwrt
        run: |
          chmod +x ../$SHOWSSR_SH && ../$SHOWSSR_SH
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Configuration Customization - ${{ env.BUILD_NAME }}
        run: |
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $CUSTOMIZE_SH && ./$CUSTOMIZE_SH
          cd openwrt
          make defconfig

      - name: Download package
        working-directory: ./openwrt
        run: |
          make download -j$(nproc) V=s
          find dl -size -1024c -exec rm -f {} \;

      - name: Build firmware
        working-directory: ./openwrt
        run: |
          make -j$(nproc) V=s

      - name: Assemble artifact
        working-directory: ./openwrt
        run: |
          rm -rf ./artifact/
          mkdir -p ./artifact/
          find ./bin/targets/ -name "*combined*img*" | xargs -i mv -f {} ./artifact/
          find ./bin/targets/ -name "*efi*img*" | xargs -i mv -f {} ./artifact/
          find ./bin/targets/ -name "*.iso" | xargs -i mv -f {} ./artifact/
          find ./bin/targets/ -name "*.vdi" | xargs -i mv -f {} ./artifact/
          find ./bin/targets/ -name "*.vmdk" | xargs -i mv -f {} ./artifact/

      - name : Upload artifact
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.BUILD_NAME }}
          path: openwrt/artifact

  release:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.BUILD_NAME }}
          path: ${{ env.BUILD_NAME }}
      
      - name: show artifact folder
        run: |
          ls -al ${{ env.BUILD_NAME }}
          cd ${{ env.BUILD_NAME }}
          pwd

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: OpenWrt ${{ github.ref }}
          body: OpenWrt ${{ github.ref/## }}
          draft: false
          prerelease: false

      - name: Upload OpenWrt generic ISO file
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ${{ env.BUILD_NAME }}/openwrt-x86-64-generic-image.iso
          asset_name: openwrt-x86-64-generic-image.iso
          asset_content_type: application/octet-stream
